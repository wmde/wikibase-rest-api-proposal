{
  "openapi": "3.0.2",
  "info": {
    "title": "Wikibase REST API Proposal",
    "version": "1.0",
    "description": "<p>This is a proposal for the structure of the future Wikibase REST API.</p><h2>Authentication</h2><p>Authentication is optional for all paths but individual resources may require it (e.g. particular items).</p>"
  },
  "servers": [
    {
      "url": "https://not-yet-implemented.wikidata.org/w/rest.php/wikibase/v0"
    }
  ],
  "components": {
    "parameters": {
      "fields": {
        "in": "query",
        "name": "_fields",
        "description": "Comma separated list of fields to include in each response object. See [JSON Data Model](https://www.mediawiki.org/wiki/Wikibase/DataModel/JSON) for field names.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "entityId": {
        "in": "path",
        "name": "entity_id",
        "description": "The id of the required item or property",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^(Q|P)[1-9]\\d{0,9}$"
        },
        "examples": {
          "item": {
            "summary": "Example of Item Id",
            "value": "Q42"
          },
          "property": {
            "summary": "Example of Property Id",
            "value": "P18"
          }
        }
      },
      "entityType": {
        "in": "path",
        "name": "entity_type",
        "description": "The type of the required entity. Can only be one of `items` or `properties`.",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "items",
            "properties"
          ]
        }
      },
      "lang": {
        "name": "lang",
        "in": "path",
        "description": "Resource language",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^[a-z]{2}[a-z0-9-]*$"
        },
        "example": "en"
      },
      "offset": {
        "in": "query",
        "description": "Results from offset index number and up",
        "name": "offset",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "example": 20
      },
      "page": {
        "in": "query",
        "description": "Result page number",
        "name": "page",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "example": 1
      },
      "per_page": {
        "in": "query",
        "description": "Number of results per page",
        "name": "per_page",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "example": 50
      },
      "qualifierHash": {
        "in": "path",
        "name": "qualifier_hash",
        "description": "Single qualifier by hash",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/QualifierHash"
        }
      },
      "referenceHash": {
        "in": "path",
        "name": "reference_hash",
        "description": "Single reference by hash",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ReferenceHash"
        }
      },
      "statementId": {
        "in": "path",
        "name": "statement_id",
        "description": "The id of the required statement",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^(Q|P)[1-9]\\d{0,9}\\$.+$"
        },
        "example": "Q42$F078E5B3-F9A8-480E-B7AC-D97778CBBEF9"
      },
      "wikiId": {
        "name": "wiki_id",
        "in": "path",
        "description": "The id of the wiki that the sitelink directs to",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "enwiki"
      },
      "ifNoneMatch": {
        "name": "If-None-Match",
        "in": "header",
        "description": "Conditionally request a resource only if changed since specified entity revision number",
        "schema": {
          "type": "string"
        },
        "examples": {
          "weak": {
            "summary": "Weak ETag",
            "value": "W/\"1276705620\""
          },
          "strong": {
            "summary": "Strong ETag",
            "value": "1276705620"
          }
        }
      },
      "ifModifiedSince": {
        "name": "If-Modified-Since",
        "in": "header",
        "description": "Conditionally request a resource only if it changed since specified date",
        "schema": {
          "type": "string"
        },
        "example": "Sat, 06 Jun 2020 16:38:47 GMT"
      }
    },
    "responses": {
      "OK": {
        "description": "OK",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          }
        }
      },
      "NotModified": {
        "description": "The specified resource has not modified since last provided revision number or date",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          }
        }
      },
      "NotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "code",
                "message"
              ]
            }
          }
        }
      },
      "UnexpectedError": {
        "description": "An unexpected error has occurred",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/NotFound/content/application~1json/schema"
            }
          }
        }
      },
      "UnauthenticatedError": {
        "description": "An authentication error has occurred. This can happen due to missing authentication (i.e. no token presented) on resources which require it.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/NotFound/content/application~1json/schema"
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "An authorization error has occurred. This can happen if an authenticated user has insufficient privileges.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/NotFound/content/application~1json/schema"
            }
          }
        }
      },
      "Property": {
        "description": "A single Wikibase Property",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Property"
            }
          }
        }
      },
      "Item": {
        "description": "A single wikibase item",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Item"
            }
          }
        }
      },
      "PropertyList": {
        "description": "A list of Wikibase Properties",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "properties": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Property"
                  }
                }
              }
            }
          }
        }
      },
      "ItemList": {
        "description": "A list of wikibase items",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      },
      "EntityAliases": {
        "description": "A list of aliases for the requested language",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "aliases": {
                  "$ref": "#/components/schemas/Aliases/additionalProperties"
                }
              }
            }
          }
        }
      },
      "EntityDescription": {
        "description": "Entity Description by language",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Term"
            }
          }
        }
      },
      "EntityLabel": {
        "description": "Entity Label by language",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Term"
            }
          }
        }
      },
      "EntityAliasesList": {
        "description": "A list of aliases by language",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Aliases"
            }
          }
        }
      },
      "EntityDescriptions": {
        "description": "Entity Description by language",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Descriptions"
            }
          }
        }
      },
      "EntityLabels": {
        "description": "Entity Label by language",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Labels"
            }
          }
        }
      },
      "Sitelink": {
        "description": "A single sitelink",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Sitelink"
            }
          }
        }
      },
      "SitelinkList": {
        "description": "A list of sitelinks by site id",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/Sitelink"
              },
              "example": {
                "afwiki": {
                  "site": "afwiki",
                  "title": "Douglas Adams",
                  "badges": [],
                  "url": "https://af.wikipedia.org/wiki/Douglas_Adams"
                },
                "arwiki": {
                  "site": "arwiki",
                  "title": "دوغلاس آدمز",
                  "badges": [],
                  "url": "https://ar.wikipedia.org/wiki/%D8%AF%D9%88%D8%BA%D9%84%D8%A7%D8%B3_%D8%A2%D8%AF%D9%85%D8%B2"
                }
              }
            }
          }
        }
      },
      "Statement": {
        "description": "A single wikibase statement",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Statement"
            }
          }
        }
      },
      "StatementList": {
        "description": "A list of wikibase statements",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "statements": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Statement"
                  }
                }
              }
            }
          }
        }
      },
      "Qualifier": {
        "description": "Persisted Qualifier with hash",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Qualifier"
            }
          }
        }
      },
      "Qualifiers": {
        "description": "Persisted Qualifiers with hashes",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Statement/properties/qualifiers"
            }
          }
        }
      },
      "Reference": {
        "description": "Persisted Reference with hash",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Reference"
            }
          }
        }
      },
      "References": {
        "description": "Persisted References with hashes",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "references": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reference"
                  }
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "Labels": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/Term"
        },
        "example": {
          "en": {
            "language": "en",
            "value": "Douglas Adams"
          },
          "fr": {
            "language": "fr",
            "value": "Douglas Adams"
          }
        }
      },
      "Descriptions": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/Term"
        },
        "example": {
          "en": {
            "language": "en",
            "value": "Science-fiction writer"
          },
          "fr": {
            "language": "fr",
            "value": "écrivain de science-fiction"
          }
        }
      },
      "Aliases": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Term"
          }
        },
        "example": {
          "en": [
            {
              "language": "en",
              "value": "Douglas Noel Adams"
            },
            {
              "language": "en",
              "value": "Douglas Noël Adams"
            }
          ],
          "fr": [
            {
              "language": "fr",
              "value": "Douglas Noel Adams"
            }
          ]
        }
      },
      "Sitelink": {
        "type": "object",
        "properties": {
          "site": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "badges": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Item": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "modified": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "type"
            ],
            "discriminator": {
              "propertyName": "type"
            }
          },
          {
            "type": "object",
            "properties": {
              "labels": {
                "$ref": "#/components/schemas/Labels"
              },
              "descriptions": {
                "$ref": "#/components/schemas/Descriptions"
              },
              "aliases": {
                "$ref": "#/components/schemas/Aliases"
              }
            },
            "required": [
              "labels",
              "descriptions",
              "aliases"
            ]
          },
          {
            "type": "object",
            "properties": {
              "statements": {
                "type": "object"
              }
            },
            "required": [
              "statements"
            ]
          },
          {
            "type": "object",
            "properties": {
              "sitelinks": {
                "$ref": "#/components/responses/SitelinkList/content/application~1json/schema"
              }
            }
          }
        ]
      },
      "Property": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Item/allOf/0"
          },
          {
            "$ref": "#/components/schemas/Item/allOf/1"
          },
          {
            "$ref": "#/components/schemas/Item/allOf/2"
          },
          {
            "type": "object",
            "properties": {
              "datatype": {
                "type": "string"
              }
            },
            "required": [
              "datatype"
            ]
          }
        ]
      },
      "Term": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "language",
          "value"
        ]
      },
      "QualifierHash": {
        "description": "Hash of a qualifier",
        "type": "string",
        "example": "455481eeac76e6a8af71a6b493c073d54788e7e9"
      },
      "ReferenceHash": {
        "description": "Hash of a reference",
        "type": "string",
        "example": "455481eeac76e6a8af71a6b493c073d54788e7e9"
      },
      "Snak": {
        "type": "object",
        "properties": {
          "snaktype": {
            "type": "string"
          },
          "property": {
            "type": "string"
          },
          "datatype": {
            "type": "string"
          },
          "datavalue": {
            "type": "object",
            "additionalProperties": true,
            "example": {
              "type": "string",
              "value": "I am a goat"
            }
          }
        }
      },
      "Statement": {
        "type": "object",
        "properties": {
          "mainsnak": {
            "$ref": "#/components/schemas/Snak"
          },
          "id": {
            "type": "string"
          },
          "rank": {
            "type": "string"
          },
          "qualifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Snak"
                  },
                  {
                    "$ref": "#/components/schemas/Qualifier/allOf/0"
                  }
                ]
              }
            },
            "example": {
              "P31": [],
              "P100": []
            }
          },
          "qualifiers-order": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          }
        }
      },
      "Qualifier": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "hash": {
                "description": "Hash of a snak",
                "type": "string",
                "example": "455481eeac76e6a8af71a6b493c073d54788e7e9"
              }
            }
          },
          {
            "$ref": "#/components/schemas/Snak"
          }
        ]
      },
      "Reference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Qualifier/allOf/0"
          },
          {
            "type": "object",
            "properties": {
              "snaks": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Snak"
                  }
                },
                "example": {
                  "P31": [],
                  "P100": []
                }
              },
              "snaks-order": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "items",
      "description": "Wikibase Items",
      "externalDocs": {
        "description": "Wikibase Data Model - Items",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#Items"
      }
    },
    {
      "name": "sitelinks",
      "description": "Wikibase Item Sitelinks",
      "externalDocs": {
        "description": "Wikibase Data Model - Sitelinks",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel/JSON#Site_Links"
      }
    },
    {
      "name": "properties",
      "description": "Wikibase Properties",
      "externalDocs": {
        "description": "Wikibase Data Model - Properties",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#Properties"
      }
    },
    {
      "name": "labels",
      "description": "Wikibase Entity Labels",
      "externalDocs": {
        "description": "Wikibase Data Model - Terms",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#EntityDescriptions_of_Items_and_Properties"
      }
    },
    {
      "name": "descriptions",
      "description": "Wikibase Entity Descriptions",
      "externalDocs": {
        "description": "Wikibase Data Model - Terms",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#EntityDescriptions_of_Items_and_Properties"
      }
    },
    {
      "name": "aliases",
      "description": "Wikibase Entity Aliases",
      "externalDocs": {
        "description": "Wikibase Data Model - Terms",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#EntityDescriptions_of_Items_and_Properties"
      }
    },
    {
      "name": "statements",
      "description": "Wikibase Statements",
      "externalDocs": {
        "description": "Wikibase Data Model - Statements",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#Statements"
      }
    },
    {
      "name": "qualifiers",
      "description": "Wikibase Statement Qualifiers",
      "externalDocs": {
        "description": "Wikibase Data Model - Snaks",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#Snaks"
      }
    },
    {
      "name": "references",
      "description": "Wikibase Statement References",
      "externalDocs": {
        "description": "Wikidata Data Model - Reference Records",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#ReferenceRecords"
      }
    }
  ],
  "paths": {
    "/entities/{entity_type}/{entity_id}/aliases": {
      "get": {
        "tags": [
          "aliases"
        ],
        "summary": "Retrieves an entity's alias lists",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityType"
          },
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EntityAliasesList"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "patch": {
        "tags": [
          "aliases"
        ],
        "summary": "Updates an entity's alias lists",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityType"
          },
          {
            "$ref": "#/components/parameters/entityId"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/patch/requestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/EntityAliasesList"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/{entity_type}/{entity_id}/aliases/{lang}": {
      "get": {
        "tags": [
          "aliases"
        ],
        "summary": "Retrieves an entity's alias list by language",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityType"
          },
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/lang"
          },
          {
            "$ref": "#/components/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EntityAliases"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "put": {
        "tags": [
          "aliases"
        ],
        "summary": "Add / Replace a whole alias list by language",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityType"
          },
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "requestBody": {
          "description": "Edit payload containing list of Aliases",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "aliases": {
                        "$ref": "#/components/schemas/Aliases/additionalProperties"
                      }
                    }
                  },
                  {
                    "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/delete/requestBody/content/application~1json/schema"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/EntityAliases"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "patch": {
        "tags": [
          "aliases"
        ],
        "summary": "Updates an entity's alias list by language",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityType"
          },
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/patch/requestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/EntityAliases"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "tags": [
          "aliases"
        ],
        "summary": "Deletes an entity's alias list by language",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityType"
          },
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/delete/requestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/{entity_type}/{entity_id}/descriptions": {
      "get": {
        "tags": [
          "descriptions"
        ],
        "summary": "Retrieves an entity's descriptions",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityType"
          },
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EntityDescriptions"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "patch": {
        "tags": [
          "descriptions"
        ],
        "summary": "Updates an entity's descriptions",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityType"
          },
          {
            "$ref": "#/components/parameters/entityId"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/patch/requestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/EntityDescriptions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/{entity_type}/{entity_id}/descriptions/{lang}": {
      "get": {
        "tags": [
          "descriptions"
        ],
        "summary": "Retrieves an entity's description by language",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityType"
          },
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/lang"
          },
          {
            "$ref": "#/components/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EntityDescription"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "put": {
        "tags": [
          "descriptions"
        ],
        "summary": "Add / Replace a description to an entity by language",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityType"
          },
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1entities~1%7Bentity_type%7D~1%7Bentity_id%7D~1labels~1%7Blang%7D/put/requestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/EntityDescription"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "tags": [
          "descriptions"
        ],
        "summary": "Deletes an entity's description by language",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityType"
          },
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/delete/requestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/{entity_type}/{entity_id}/labels": {
      "get": {
        "tags": [
          "labels"
        ],
        "summary": "Retrieves an entity's labels",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityType"
          },
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EntityLabels"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "patch": {
        "tags": [
          "labels"
        ],
        "summary": "Updates an entity's labels",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityType"
          },
          {
            "$ref": "#/components/parameters/entityId"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/patch/requestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/EntityLabels"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/{entity_type}/{entity_id}/labels/{lang}": {
      "get": {
        "tags": [
          "labels"
        ],
        "summary": "Retrieve an entity's label by language",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityType"
          },
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/lang"
          },
          {
            "$ref": "#/components/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EntityLabel"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "put": {
        "tags": [
          "labels"
        ],
        "summary": "Add / Replace a label to an entity by language",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityType"
          },
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "requestBody": {
          "description": "Edit payload containing an object with information about a value and the language it is in",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "term": {
                        "$ref": "#/components/schemas/Term"
                      }
                    }
                  },
                  {
                    "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/delete/requestBody/content/application~1json/schema"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/EntityLabel"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "tags": [
          "labels"
        ],
        "summary": "Delete an entity's label by language",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityType"
          },
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/delete/requestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/{entity_type}/{entity_id}/statements": {
      "get": {
        "tags": [
          "statements"
        ],
        "summary": "Retrieve a list of entity Statements",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityType"
          },
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StatementList"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "tags": [
          "statements"
        ],
        "summary": "Add a new Statement to an entity (Item | Property)",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityType"
          },
          {
            "$ref": "#/components/parameters/entityId"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/put/requestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Statement"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/items": {
      "get": {
        "tags": [
          "items"
        ],
        "summary": "Retrieve a list of Wikibase Items",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ItemList"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "tags": [
          "items"
        ],
        "summary": "Create a new Wikibase Item",
        "requestBody": {
          "description": "Edit payload containing a Wikibase Item",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "item": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Item/allOf/1"
                          },
                          {
                            "$ref": "#/components/schemas/Item/allOf/2"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "sitelinks": {
                                "$ref": "#/components/responses/SitelinkList/content/application~1json/schema"
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/delete/requestBody/content/application~1json/schema"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Item"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/items/{entity_id}": {
      "get": {
        "tags": [
          "items"
        ],
        "summary": "Single Wikibase Item by Id",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Item"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "put": {
        "tags": [
          "items"
        ],
        "summary": "Replace a Wikibase Item by Id",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityId"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1entities~1items/post/requestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Item"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "patch": {
        "tags": [
          "items"
        ],
        "summary": "Update a Wikibase Item by Id",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityId"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/patch/requestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Item"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "tags": [
          "items"
        ],
        "summary": "Delete a Single Item by Id",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityId"
          }
        ],
        "requestBody": {
          "description": "Delete payload including a reason for deletion",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string"
                  },
                  "tags": {
                    "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/delete/requestBody/content/application~1json/schema/properties/tags"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/items/{entity_id}/sitelinks": {
      "get": {
        "tags": [
          "sitelinks"
        ],
        "summary": "Retrieves an item's sitelinks",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SitelinkList"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "tags": [
          "sitelinks"
        ],
        "summary": "Creates an item's sitelink",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityId"
          }
        ],
        "requestBody": {
          "description": "A Wikibase Sitelink object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "sitelink": {
                        "$ref": "#/components/schemas/Sitelink"
                      }
                    }
                  },
                  {
                    "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/delete/requestBody/content/application~1json/schema"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Sitelink"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/items/{entity_id}/sitelinks/{wiki_id}": {
      "get": {
        "tags": [
          "sitelinks"
        ],
        "summary": "Retrieves an Item's sitelink by wiki-id",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/wikiId"
          },
          {
            "$ref": "#/components/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Sitelink"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "patch": {
        "tags": [
          "sitelinks"
        ],
        "summary": "Updates an Item's sitelink by wiki-id",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/wikiId"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/patch/requestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Sitelink"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "tags": [
          "sitelinks"
        ],
        "summary": "Item's sitelink by wiki-id",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/wikiId"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/delete/requestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/properties": {
      "get": {
        "tags": [
          "properties"
        ],
        "summary": "Retrieve a list of Wikibase Properties",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PropertyList"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "tags": [
          "properties"
        ],
        "summary": "Create a new Wikibase Property",
        "requestBody": {
          "description": "Edit payload containing a Wikibase Property",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "property": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Item/allOf/1"
                          },
                          {
                            "$ref": "#/components/schemas/Item/allOf/2"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/delete/requestBody/content/application~1json/schema"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Property"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/properties/{entity_id}": {
      "get": {
        "tags": [
          "properties"
        ],
        "summary": "Single Property",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Property"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "put": {
        "tags": [
          "properties"
        ],
        "summary": "Replace a Wikibase Property by Id",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityId"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1entities~1properties/post/requestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Property"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "patch": {
        "tags": [
          "properties"
        ],
        "summary": "Update a Wikibase Property by Id",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityId"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/patch/requestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Property"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "tags": [
          "properties"
        ],
        "summary": "Remove a Single Property by Id",
        "parameters": [
          {
            "$ref": "#/components/parameters/entityId"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1entities~1items~1%7Bentity_id%7D/delete/requestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/statements/{statement_id}": {
      "get": {
        "tags": [
          "statements"
        ],
        "summary": "Retrieves a single Statement from an entity (items | properties)",
        "description": "This endpoint is also accessible through `/entities/{entity_type}/{entity_id}/statements/{statement_id}`",
        "parameters": [
          {
            "$ref": "#/components/parameters/statementId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Statement"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "patch": {
        "tags": [
          "statements"
        ],
        "summary": "Updates a Wikibase Statement by Id",
        "parameters": [
          {
            "$ref": "#/components/parameters/statementId"
          }
        ],
        "requestBody": {
          "description": "Edit payload containing a list of JSON-PATCH objects that describe changes to the resource",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patches": {
                        "description": "A list of JSONPatch objects as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "description": "A JSONPatch object as defined by RFC 6902",
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "remove",
                                "replace"
                              ]
                            },
                            "path": {
                              "description": "A JSON-Pointer for the property to manipulate",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    }
                  },
                  {
                    "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/delete/requestBody/content/application~1json/schema"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Statement"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "put": {
        "tags": [
          "statements"
        ],
        "summary": "Replaces a Wikibase Statement by Id",
        "parameters": [
          {
            "$ref": "#/components/parameters/statementId"
          }
        ],
        "requestBody": {
          "description": "Edit payload containing a Wikibase Statement object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "statement": {
                        "type": "object",
                        "properties": {
                          "mainsnak": {
                            "$ref": "#/components/schemas/Snak"
                          },
                          "rank": {
                            "type": "string"
                          },
                          "qualifiers": {
                            "$ref": "#/components/schemas/Reference/allOf/1/properties/snaks"
                          },
                          "qualifiers-order": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "references": {
                            "type": "array",
                            "items": {
                              "$ref": "#/paths/~1statements~1%7Bstatement_id%7D~1references/post/requestBody/content/application~1json/schema/allOf/0/properties/reference"
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/delete/requestBody/content/application~1json/schema"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Statement"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "tags": [
          "statements"
        ],
        "summary": "Single statement from an entity (items | properties)",
        "description": "This endpoint is also accessible through `/entities/{entity_type}/{entity_id}/statements/{statement_id}`",
        "parameters": [
          {
            "$ref": "#/components/parameters/statementId"
          }
        ],
        "requestBody": {
          "description": "Edit payload containing edit meta data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "bot": {
                    "type": "boolean"
                  },
                  "latest": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "example": "123"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/statements/{statement_id}/qualifiers": {
      "get": {
        "tags": [
          "qualifiers"
        ],
        "summary": "Lists qualifiers for a Statement",
        "description": "This endpoint is also accessible through `/entities/{entity_type}/{entity_id}/statements/{statement_id}/qualifiers`",
        "parameters": [
          {
            "$ref": "#/components/parameters/statementId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Qualifiers"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "tags": [
          "qualifiers"
        ],
        "summary": "Add a new Qualifier to a Statement",
        "description": "This endpoint is also accessible through `/entities/{entity_type}/{entity_id}/statements/{statement_id}/qualifiers`",
        "parameters": [
          {
            "$ref": "#/components/parameters/statementId"
          }
        ],
        "requestBody": {
          "description": "A Wikibase qualifier object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "qualifier": {
                        "$ref": "#/components/schemas/Snak"
                      }
                    }
                  },
                  {
                    "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/delete/requestBody/content/application~1json/schema"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Qualifier"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/statements/{statement_id}/qualifiers/{qualifier_hash}": {
      "get": {
        "tags": [
          "qualifiers"
        ],
        "summary": "Single qualifier by hash",
        "description": "This endpoint is also accessible through `/entities/{entity_type}/{entity_id}/statements/{statement_id}/qualifiers/{qualifierHash}`",
        "parameters": [
          {
            "$ref": "#/components/parameters/statementId"
          },
          {
            "$ref": "#/components/parameters/qualifierHash"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Qualifier"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "tags": [
          "qualifiers"
        ],
        "summary": "Update a qualifier",
        "description": "This endpoint is also accessible through `/entities/{entity_type}/{entity_id}/statements/{statement_id}/qualifiers/{qualifierHash}`",
        "parameters": [
          {
            "$ref": "#/components/parameters/statementId"
          },
          {
            "$ref": "#/components/parameters/qualifierHash"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1statements~1%7Bstatement_id%7D~1qualifiers/post/requestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Qualifier"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "tags": [
          "qualifiers"
        ],
        "summary": "Single qualifier by hash",
        "description": "This endpoint is also accessible through `/entities/{entity_type}/{entity_id}/statements/{statement_id}/qualifiers/{qualifier_hash}`",
        "parameters": [
          {
            "$ref": "#/components/parameters/statementId"
          },
          {
            "$ref": "#/components/parameters/qualifierHash"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/delete/requestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/statements/{statement_id}/references": {
      "get": {
        "tags": [
          "references"
        ],
        "summary": "Lists references for a Statement",
        "description": "This endpoint is also accessible through `/entities/{entity_type}/{entity_id}/statements/{statement_id}/references`",
        "parameters": [
          {
            "$ref": "#/components/parameters/statementId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/References"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "tags": [
          "references"
        ],
        "summary": "Add a new Reference to a Statement",
        "description": "This endpoint is also accessible through `/entities/{entity_type}/{entity_id}/statements/{statement_id}/references`",
        "parameters": [
          {
            "$ref": "#/components/parameters/statementId"
          }
        ],
        "requestBody": {
          "description": "A Wikibase reference",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "reference": {
                        "type": "object",
                        "properties": {
                          "snaks": {
                            "$ref": "#/components/schemas/Reference/allOf/1/properties/snaks"
                          },
                          "snaks-order": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/delete/requestBody/content/application~1json/schema"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Reference"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/statements/{statement_id}/references/{reference_hash}": {
      "get": {
        "tags": [
          "references"
        ],
        "summary": "Single reference by hash",
        "description": "This endpoint is also accessible through `/entities/{entity_type}/{entity_id}/statements/{statement_id}/references/{reference_hash}`",
        "parameters": [
          {
            "$ref": "#/components/parameters/statementId"
          },
          {
            "$ref": "#/components/parameters/referenceHash"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/ifNoneMatch"
          },
          {
            "$ref": "#/components/parameters/ifModifiedSince"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Reference"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "tags": [
          "references"
        ],
        "summary": "Update a reference",
        "description": "This endpoint is also accessible through `/entities/{entity_type}/{entity_id}/statements/{statement_id}/references/{reference_hash}`",
        "parameters": [
          {
            "$ref": "#/components/parameters/statementId"
          },
          {
            "$ref": "#/components/parameters/referenceHash"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1statements~1%7Bstatement_id%7D~1references/post/requestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Reference"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "tags": [
          "references"
        ],
        "summary": "Single reference by hash",
        "description": "This endpoint is also accessible through `/entities/{entity_type}/{entity_id}/statements/{statement_id}/references/{reference_hash}`",
        "parameters": [
          {
            "$ref": "#/components/parameters/statementId"
          },
          {
            "$ref": "#/components/parameters/referenceHash"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1statements~1%7Bstatement_id%7D/delete/requestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "501": {
            "$ref": "#/components/responses/UnauthenticatedError"
          },
          "503": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "default": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    }
  },
  "security": [
    {},
    {
      "bearerAuth": []
    }
  ]
}
